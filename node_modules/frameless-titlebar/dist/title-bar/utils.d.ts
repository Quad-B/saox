/// <reference types="react" />
import { MenuItem, TitleBarTheme, RectResult, OverflowState } from "./typings";
export declare const isItemSubMenu: (item?: MenuItem | undefined) => boolean;
export declare const isItemSeparator: (item?: MenuItem | undefined) => boolean | undefined;
export declare const getCurrentRef: (childRefs: import("react").RefObject<HTMLElement>[], index: number, overflow?: OverflowState | undefined, overflowRef?: import("react").RefObject<HTMLElement> | undefined) => import("react").RefObject<HTMLElement> | undefined;
export declare const toggleCheckedState: (menu: MenuItem[], index: number, radio?: boolean) => void;
export declare const calcMaximums: (bounds: RectResult, theme: Required<TitleBarTheme>) => [number, number];
export declare const menuItemClick: (e: any, idx: number, item: MenuItem, menu: MenuItem[], dispatch: any, currentWindow?: object | undefined) => void;
export declare const currentSelected: (selectedPath: number[], depth: number) => number;
export declare const getSelectedMenu: (menu: MenuItem[], selected: number[]) => [MenuItem[], number];
export declare const getSelectedItem: (menu: MenuItem[], selected: number[]) => [MenuItem, number, MenuItem[], number];
export declare const validNext: (menu: MenuItem[], start: number, maxIndex?: number | undefined) => number;
export declare const validPrevious: (menu: MenuItem[], start: number, maxIndex?: number | undefined) => number;
export declare const getValidItem: (menu: MenuItem[], selected: number[], prev?: boolean) => number[];
export declare const immutableSplice: <T>(arr: T[], start: number, deleteCount: number, ...items: T[]) => T[];
