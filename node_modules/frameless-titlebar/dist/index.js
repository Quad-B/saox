'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if ( module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
});

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}var AsyncMode=l;var ConcurrentMode=m;var ContextConsumer=k;var ContextProvider=h;var Element=c;var ForwardRef=n;var Fragment=e;var Lazy=t;var Memo=r;var Portal=d;
var Profiler=g;var StrictMode=f;var Suspense=p;var isAsyncMode=function(a){return A(a)||z(a)===l};var isConcurrentMode=A;var isContextConsumer=function(a){return z(a)===k};var isContextProvider=function(a){return z(a)===h};var isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};var isForwardRef=function(a){return z(a)===n};var isFragment=function(a){return z(a)===e};var isLazy=function(a){return z(a)===t};
var isMemo=function(a){return z(a)===r};var isPortal=function(a){return z(a)===d};var isProfiler=function(a){return z(a)===g};var isStrictMode=function(a){return z(a)===f};var isSuspense=function(a){return z(a)===p};
var isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};var typeOf=z;

var reactIs_production_min = {
	AsyncMode: AsyncMode,
	ConcurrentMode: ConcurrentMode,
	ContextConsumer: ContextConsumer,
	ContextProvider: ContextProvider,
	Element: Element,
	ForwardRef: ForwardRef,
	Fragment: Fragment,
	Lazy: Lazy,
	Memo: Memo,
	Portal: Portal,
	Profiler: Profiler,
	StrictMode: StrictMode,
	Suspense: Suspense,
	isAsyncMode: isAsyncMode,
	isConcurrentMode: isConcurrentMode,
	isContextConsumer: isContextConsumer,
	isContextProvider: isContextProvider,
	isElement: isElement,
	isForwardRef: isForwardRef,
	isFragment: isFragment,
	isLazy: isLazy,
	isMemo: isMemo,
	isPortal: isPortal,
	isProfiler: isProfiler,
	isStrictMode: isStrictMode,
	isSuspense: isSuspense,
	isValidElementType: isValidElementType,
	typeOf: typeOf
};

var reactIs_development = createCommonjsModule(function (module, exports) {



if (process.env.NODE_ENV !== "production") {
  (function() {

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?

var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_LAZY_TYPE:
              case REACT_MEMO_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
} // AsyncMode is deprecated along with isAsyncMode

var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }

  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
exports.isValidElementType = isValidElementType;
exports.typeOf = typeOf;
  })();
}
});
var reactIs_development_1 = reactIs_development.AsyncMode;
var reactIs_development_2 = reactIs_development.ConcurrentMode;
var reactIs_development_3 = reactIs_development.ContextConsumer;
var reactIs_development_4 = reactIs_development.ContextProvider;
var reactIs_development_5 = reactIs_development.Element;
var reactIs_development_6 = reactIs_development.ForwardRef;
var reactIs_development_7 = reactIs_development.Fragment;
var reactIs_development_8 = reactIs_development.Lazy;
var reactIs_development_9 = reactIs_development.Memo;
var reactIs_development_10 = reactIs_development.Portal;
var reactIs_development_11 = reactIs_development.Profiler;
var reactIs_development_12 = reactIs_development.StrictMode;
var reactIs_development_13 = reactIs_development.Suspense;
var reactIs_development_14 = reactIs_development.isAsyncMode;
var reactIs_development_15 = reactIs_development.isConcurrentMode;
var reactIs_development_16 = reactIs_development.isContextConsumer;
var reactIs_development_17 = reactIs_development.isContextProvider;
var reactIs_development_18 = reactIs_development.isElement;
var reactIs_development_19 = reactIs_development.isForwardRef;
var reactIs_development_20 = reactIs_development.isFragment;
var reactIs_development_21 = reactIs_development.isLazy;
var reactIs_development_22 = reactIs_development.isMemo;
var reactIs_development_23 = reactIs_development.isPortal;
var reactIs_development_24 = reactIs_development.isProfiler;
var reactIs_development_25 = reactIs_development.isStrictMode;
var reactIs_development_26 = reactIs_development.isSuspense;
var reactIs_development_27 = reactIs_development.isValidElementType;
var reactIs_development_28 = reactIs_development.typeOf;

var reactIs = createCommonjsModule(function (module) {

if (process.env.NODE_ENV === 'production') {
  module.exports = reactIs_production_min;
} else {
  module.exports = reactIs_development;
}
});

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret;

var printWarning = function() {};

if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if (process.env.NODE_ENV !== 'production') {
    loggedTypeFailures = {};
  }
};

var checkPropTypes_1 = checkPropTypes;

var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning$1 = function() {};

if (process.env.NODE_ENV !== 'production') {
  printWarning$1 = function(text) {
    var message = 'Warning: ' + text;
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret_1) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning$1(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!reactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (process.env.NODE_ENV !== 'production') {
        if (arguments.length > 1) {
          printWarning$1(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning$1('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has$1(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning$1(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = objectAssign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes_1;
  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

var factoryWithThrowingShims = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret_1) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  }  shim.isRequired = shim;
  function getShim() {
    return shim;
  }  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

var propTypes = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var ReactIs = reactIs;

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = factoryWithThrowingShims();
}
});

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = "/*\n  TITLE BAR STYLES\n*/\n\n.style_Bar__nNJjZ {\n  flex-grow: 0;\n  flex-shrink: 0;\n  display: flex;\n  flex-direction: row;\n  font-size: 12px;\n  -webkit-app-region: drag;\n  user-select: none;\n  align-items: center;\n}\n\n.style_Title__3pWgw {\n  flex: 0 1 auto;\n  font-size: 12px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  pointer-events: none;\n  user-select: none;\n}\n\n.style_Logo__1AxaT {\n  background-size: cover;\n  background-position: center;\n  flex-shrink: 0;\n  margin-left: 12px;\n  margin-right: 6px;\n}\n\n.style_Logo__1AxaT.style_Vertical__1QXbd {\n  margin-left: 6px;\n}\n\n.style_ResizeHandle__2Iivi {\n  position: absolute;\n  top: 0;\n  left: 0;\n  -webkit-app-region: no-drag;\n}\n\n.style_ResizeHandle__2Iivi.style_Top__xowfD {\n  height: 3px;\n  right: 0;\n}\n\n.style_ResizeHandle__2Iivi.style_Left__3yF2k {\n  bottom: 0;\n  width: 3px;\n}\n\n/*\n  MENU BAR STYLES\n*/\n\n.style_MenuBar__1Rm7F {\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  flex-shrink: 2;\n  box-sizing: border-box;\n}\n\n.style_MenuOverlay__uwof3 {\n  outline: none;\n  border: none;\n  box-shadow: none;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.style_MenuButtonContainer__3d9pg {\n  min-width: 0;\n  flex-shrink: 0;\n  height: 100%;\n  box-sizing: content-box;\n  outline: none;\n  position: relative;\n  -webkit-app-region: no-drag;\n}\n\n.style_MenuButtonLabel__uuUFw {\n  white-space: nowrap;\n  user-select: none;\n  outline: none;\n}\n\n.style_MenuButtonLabelWrapper__w7eBH {\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  outline: none;\n  color: inherit;\n  user-select: none;\n}\n\n.style_MenuButtonLabelWrapper__w7eBH > svg {\n  fill: currentColor;\n}\n\n.style_MenuButton__1L_cT {\n  -webkit-appearance: none;\n  border: none;\n  box-shadow: none;\n  background: transparent;\n  border-radius: 0;\n  text-align: left;\n  margin: 0;\n  padding: 0;\n  height: 100%;\n  width: 100%;\n  font-size: 12px;\n  padding-left: 10px;\n  padding-right: 10px;\n  box-sizing: border-box;\n  outline: none;\n}\n\n.style_MenuButtonWrapper__38r62 {\n  width: 100%;\n  height: 100%;\n}\n\n/*\n  MENU LIST STYLES\n*/\n\n.style_MenuListContainer__9aIuk {\n  position: fixed;\n  outline: none;\n  border: none;\n}\n\n.style_MenuListScrollView__zHZyv {\n  overflow: hidden;\n}\n\n.style_MenuList__1byLi {\n  overflow: hidden;\n}\n\n.style_MenuListVertical__24r-l {\n  margin-left: 0px;\n  overflow: visible;\n  text-align: left;\n  white-space: nowrap;\n}\n\n.style_MenuListItems__BJ1Kq {\n  display: block;\n  margin: 0 auto;\n  padding: 0;\n  flex: 1;\n  width: 100%;\n  justify-content: flex-end;\n  list-style-type: none;\n}\n\n.style_SubMenuLabel__30vnk {\n  height: 20px;\n  line-height: 20px;\n  margin: 0px 10px;\n  font-weight: bold;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  direction: rtl;\n  font-size: 1em;\n  text-align: left;\n}\n\n/*\n  MENU ITEM STYLES\n*/\n\n.style_MenuItemContainer__2XSTu {\n  overflow: visible;\n  padding: 0px;\n  transform: none;\n  display: flex;\n  cursor: default;\n  position: static;\n}\n\n.style_MenuItemWrapper__1_gpb {\n  font-size: 12;\n  padding: 0px 10px 0px 6px;\n  color: inherit;\n  flex: 1 1 auto;\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  cursor: default;\n  overflow: hidden;\n}\n\n.style_Accelerator__-ywU5 {\n  flex-shrink: 0;\n  margin-right: 10px;\n}\n\n.style_MenuItemLabel__2Qj9U {\n  flex-grow: 1;\n  margin-left: 10px;\n  margin-right: 10px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  cursor: default;\n  pointer-events: none;\n}\n\n.style_SubMenuArrow__213i8 {\n  flex-shrink: 0;\n  opacity: 0.7;\n  height: 24px;\n  color: inherit;\n}\n\n.style_SubMenuArrow__213i8 > svg {\n  fill: currentColor;\n  width: 20px;\n  height: 20px;\n}\n\n.style_Separator__3qKSO {\n  display: block;\n  width: 100%;\n  border: none;\n  height: 1px;\n}\n\n.style_MenuItemIcon__vPvyA {\n  width: 100%;\n  height: 100%;\n  background-size: contain;\n  background-position: center;\n}\n\n.style_StatusIcon__1JFrB {\n  width: 12px;\n  height: 12px;\n  flex-shrink: 0;\n  margin-right: 4px;\n}\n\n.style_StatusIcon__1JFrB > svg {\n  width: 100%;\n  height: 100%;\n  fill: currentColor;\n}\n\n/*\n  WINDOW CONTROLS STYLES\n*/\n\n.style_ControlsWrapper__1Sa4Y {\n  display: flex;\n  flex-shrink: 0;\n  flex-direction: row;\n  height: 100%;\n  -webkit-app-region: no-drag;\n  line-height: inherit;\n}\n\n.style_Control__1Aquc {\n  flex: 1 0 auto;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  align-items: center;\n}\n\n.style_Control__1Aquc > div {\n  background: transparent;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  align-items: center;\n  text-align: center;\n  line-height: inherit;\n  color: inherit;\n  fill: currentColor;\n}\n";
var styles = {"Bar":"style_Bar__nNJjZ","Title":"style_Title__3pWgw","Logo":"style_Logo__1AxaT","Vertical":"style_Vertical__1QXbd","ResizeHandle":"style_ResizeHandle__2Iivi","Top":"style_Top__xowfD","Left":"style_Left__3yF2k","MenuBar":"style_MenuBar__1Rm7F","MenuOverlay":"style_MenuOverlay__uwof3","MenuButtonContainer":"style_MenuButtonContainer__3d9pg","MenuButtonLabel":"style_MenuButtonLabel__uuUFw","MenuButtonLabelWrapper":"style_MenuButtonLabelWrapper__w7eBH","MenuButton":"style_MenuButton__1L_cT","MenuButtonWrapper":"style_MenuButtonWrapper__38r62","MenuListContainer":"style_MenuListContainer__9aIuk","MenuListScrollView":"style_MenuListScrollView__zHZyv","MenuList":"style_MenuList__1byLi","MenuListVertical":"style_MenuListVertical__24r-l","MenuListItems":"style_MenuListItems__BJ1Kq","SubMenuLabel":"style_SubMenuLabel__30vnk","MenuItemContainer":"style_MenuItemContainer__2XSTu","MenuItemWrapper":"style_MenuItemWrapper__1_gpb","Accelerator":"style_Accelerator__-ywU5","MenuItemLabel":"style_MenuItemLabel__2Qj9U","SubMenuArrow":"style_SubMenuArrow__213i8","Separator":"style_Separator__3qKSO","MenuItemIcon":"style_MenuItemIcon__vPvyA","StatusIcon":"style_StatusIcon__1JFrB","ControlsWrapper":"style_ControlsWrapper__1Sa4Y","Control":"style_Control__1Aquc"};
styleInject(css_248z);

// @flow
var MinimizeIcon = function (_a) {
    var isWin = _a.isWin;
    return isWin ? (React__default.createElement("svg", { version: "1.1", "aria-hidden": "true", width: "10", height: "10" },
        React__default.createElement("path", { d: "M 0,5 10,5 10,6 0,6 Z" })))
        : (React__default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", height: "16", width: "16" },
            React__default.createElement("path", { d: "M7 3v4H4l3.156 4H4v2h8v-2H8.844L12 7H9V3z", style: { marker: 'none' }, overflow: "visible" }),
            React__default.createElement("text", { x: "613.992", y: "426.851", fontSize: "14", fontWeight: "400", opacity: ".8", fontFamily: "Bitstream Vera Sans", transform: "translate(-293 -188)" }),
            React__default.createElement("text", { x: "-1401.69", y: "1250.896", fontSize: "14", fontWeight: "400", opacity: ".8", fontFamily: "Bitstream Vera Sans", transform: "translate(-293 -188)" }),
            React__default.createElement("text", { x: "-474.763", y: "195.667", fontSize: "14", fontWeight: "400", opacity: ".8", fontFamily: "Bitstream Vera Sans", transform: "translate(-293 -188)" }),
            React__default.createElement("text", { x: "417.863", y: "-261.333", fontSize: "14", fontWeight: "400", opacity: ".8", fontFamily: "Bitstream Vera Sans", transform: "translate(-293 -188)" }),
            React__default.createElement("text", { x: "444.346", y: "-306.364", fontSize: "14", fontWeight: "400", opacity: ".8", fontFamily: "Bitstream Vera Sans", transform: "translate(-293 -188)" }),
            React__default.createElement("text", { x: "-1204.137", y: "-314.333", fontSize: "14", fontWeight: "400", opacity: ".8", fontFamily: "Bitstream Vera Sans", transform: "translate(-293 -188)" }),
            React__default.createElement("text", { x: "410.171", y: "-616.333", fontSize: "14", fontWeight: "400", opacity: ".8", fontFamily: "Bitstream Vera Sans", transform: "translate(-293 -188)" }),
            React__default.createElement("text", { x: "2052.752", y: "76.336", fontSize: "14", fontWeight: "400", opacity: ".8", fontFamily: "Bitstream Vera Sans", transform: "translate(-293 -188)" }),
            React__default.createElement("text", { x: "2079.236", y: "31.305", fontSize: "14", fontWeight: "400", opacity: ".8", fontFamily: "Bitstream Vera Sans", transform: "translate(-293 -188)" }),
            React__default.createElement("text", { x: "430.752", y: "23.336", fontSize: "14", fontWeight: "400", opacity: ".8", fontFamily: "Bitstream Vera Sans", transform: "translate(-293 -188)" }),
            React__default.createElement("text", { x: "2045.06", y: "-278.664", fontSize: "14", fontWeight: "400", opacity: ".8", fontFamily: "Bitstream Vera Sans", transform: "translate(-293 -188)" }),
            React__default.createElement("text", { x: "-605.797", y: "-29.818", fontSize: "14", fontWeight: "400", opacity: ".8", fontFamily: "Bitstream Vera Sans", transform: "translate(-293 -188)" }),
            React__default.createElement("text", { x: "-2621.479", y: "794.227", fontSize: "14", fontWeight: "400", opacity: ".8", fontFamily: "Bitstream Vera Sans", transform: "translate(-293 -188)" }),
            React__default.createElement("text", { x: "-726.195", y: "896.876", fontSize: "14", fontWeight: "400", opacity: ".8", fontFamily: "Bitstream Vera Sans", transform: "translate(-293 -188)" })));
};
var MaximizeIcon = function (_a) {
    var isWin = _a.isWin;
    return isWin ? (React__default.createElement("svg", { version: "1.1", "aria-hidden": "true", width: "10", height: "10" },
        React__default.createElement("path", { d: "M 0,0 0,10 10,10 10,0 Z M 1,1 9,1 9,9 1,9 Z" })))
        : (React__default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", height: "16", width: "16" },
            React__default.createElement("path", { d: "M8 2l2.25 2.223-1.714 1.714-.027.027c-.38.42-.379 1.068.027 1.474a1.07 1.07 0 0 0 1.473.053l.214-.214 1.554-1.527L14 8V2zM2 8v6h6l-2.25-2.25 1.714-1.714.027-.027c.38-.42.379-1.068-.027-1.473-.405-.406-1.08-.434-1.5-.054l-.187.214-1.554 1.554z", style: { marker: 'none' }, overflow: "visible" })));
};
var CloseIcon = function (_a) {
    var isWin = _a.isWin;
    return isWin ? (React__default.createElement("svg", { "aria-hidden": "true", version: "1.1", width: "10", height: "10" },
        React__default.createElement("path", { d: "M 0,0 0,0.7 4.3,5 0,9.3 0,10 0.7,10 5,5.7 9.3,10 10,10 10,9.3 5.7,5 10,0.7 10,0 9.3,0 5,4.3 0.7,0 Z" })))
        : (React__default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", height: "16", width: "16" },
            React__default.createElement("path", { d: "M7.97 6.556L10.5 4 12 5.5 9.401 7.987 12 10.5 10.5 12 7.987 9.401 5.5 12 4 10.5 6.586 8 4 5.5 5.5 4l2.47 2.556z", style: { marker: 'none' }, overflow: "visible" })));
};

var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}

function cloneUnlessOtherwiseSpecified(value, options) {
	return (options.clone !== false && options.isMergeableObject(value))
		? deepmerge(emptyTarget(value), value, options)
		: value
}

function defaultArrayMerge(target, source, options) {
	return target.concat(source).map(function(element) {
		return cloneUnlessOtherwiseSpecified(element, options)
	})
}

function getMergeFunction(key, options) {
	if (!options.customMerge) {
		return deepmerge
	}
	var customMerge = options.customMerge(key);
	return typeof customMerge === 'function' ? customMerge : deepmerge
}

function getEnumerableOwnPropertySymbols(target) {
	return Object.getOwnPropertySymbols
		? Object.getOwnPropertySymbols(target).filter(function(symbol) {
			return target.propertyIsEnumerable(symbol)
		})
		: []
}

function getKeys(target) {
	return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
}

function propertyIsOnObject(object, property) {
	try {
		return property in object
	} catch(_) {
		return false
	}
}

// Protects from prototype poisoning and unexpected merging up the prototype chain.
function propertyIsUnsafe(target, key) {
	return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
		&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
			&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
}

function mergeObject(target, source, options) {
	var destination = {};
	if (options.isMergeableObject(target)) {
		getKeys(target).forEach(function(key) {
			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
		});
	}
	getKeys(source).forEach(function(key) {
		if (propertyIsUnsafe(target, key)) {
			return
		}

		if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
			destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
		} else {
			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
		}
	});
	return destination
}

function deepmerge(target, source, options) {
	options = options || {};
	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
	options.isMergeableObject = options.isMergeableObject || isMergeableObject;
	// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
	// implementations can use it. The caller may not replace it.
	options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;

	var sourceIsArray = Array.isArray(source);
	var targetIsArray = Array.isArray(target);
	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	if (!sourceAndTargetTypesMatch) {
		return cloneUnlessOtherwiseSpecified(source, options)
	} else if (sourceIsArray) {
		return options.arrayMerge(target, source, options)
	} else {
		return mergeObject(target, source, options)
	}
}

deepmerge.all = function deepmergeAll(array, options) {
	if (!Array.isArray(array)) {
		throw new Error('first argument should be an array')
	}

	return array.reduce(function(prev, next) {
		return deepmerge(prev, next, options)
	}, {})
};

var deepmerge_1 = deepmerge;

var cjs = deepmerge_1;

var menuTheme = {
    dark: {
        palette: 'dark',
        style: 'default',
        item: {
            height: 30,
            disabledOpacity: 0.3,
            default: {
                color: 'inherit',
                background: 'transparent'
            },
            active: {
                color: '#fff',
                background: '#0372ef'
            }
        },
        separator: {
            color: '#e1e4e8'
        },
        header: {
            show: true,
            color: '#6a737d',
        },
        accelerator: {
            color: '#6a737d',
        },
        icon: {
            highlight: true
        },
        list: {
            minWidth: 200,
            maxWidth: 400,
            marginBottom: 10,
            background: 'rgb(48, 48, 48)',
            boxShadow: '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)',
            zIndex: 2001,
        },
        overlay: {
            background: 'black',
            opacity: 0.4,
            zIndex: 2000
        },
        marginRight: 0
    },
    light: {
        palette: 'light',
        item: {
            default: {
                color: '#24292e'
            }
        },
        list: {
            background: '#fff',
        }
    },
    vertical: {
        style: 'vertical',
    },
    stacked: {
        style: 'stacked',
        marginRight: 200
    }
};
var controlsTheme = {
    dark: {
        border: 'none',
        layout: 'right',
        borderRadius: 0,
        normal: {
            default: {
                color: 'inherit',
                background: 'transparent'
            },
            hover: {
                color: '#fff',
                background: 'rgba(255,255,255,0.3)'
            }
        },
        close: {
            default: {
                color: 'inherit',
                background: 'transparent'
            },
            hover: {
                color: '#fff',
                background: '#e81123'
            }
        }
    },
    light: {
        color: '#000',
        normal: {
            hover: {
                background: 'rgba(0, 0, 0, 0.1)'
            },
        },
    },
    linux: {
        border: '1px solid rgba(0,0,0,0.06)',
        borderRadius: '50%',
        close: {
            hover: {
                background: '#c85458'
            },
        }
    }
};
var barTheme = {
    dark: {
        // light, dark
        palette: 'dark',
        height: '28px',
        color: '#fff',
        background: '#24292e',
        borderBottom: '1px solid #000',
        // dim menu bar & title color when window is not in focus
        inActiveOpacity: 0.6,
        // default fontFamily for titlebar eg: menus, menu buttons, and title
        fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Arial, sans-serif",
        icon: {
            color: '#0372ef',
            width: 20,
            height: 20
        },
        title: {
            color: 'inherit',
            align: 'center',
            // overwritable fontFamily for just the app title
            fontFamily: 'inherit',
            fontWeight: 'normal',
        },
        button: {
            maxWidth: 100,
            active: {
                color: '#fff',
                background: 'rgb(48, 48, 48)',
            },
            default: {
                color: 'inherit',
                background: 'transparent'
            },
            hover: {
                color: 'inherit',
                background: 'rgba(255,255,255,0.3)'
            },
            disabledOpacity: 0.3
        },
    },
    light: {
        palette: 'light',
        color: '#24292e',
        background: '#e8e8e8',
        borderBottom: '1px solid #d3d4d5',
        button: {
            active: {
                color: '#24292e',
                background: '#fff',
            },
            hover: {
                background: 'rgba(0, 0, 0, 0.1)'
            }
        },
    },
    darwin: {
        height: '22px',
    },
};
var getMenuTheme = function (palette, menuStyle) {
    if (menuStyle === void 0) { menuStyle = 'default'; }
    var menu = menuTheme['dark'];
    if (palette === 'light') {
        menu = cjs(menu, menuTheme['light']);
    }
    if (menuStyle !== 'default') {
        menu = cjs(menu, menuTheme[menuStyle]);
    }
    return menu;
};
var getControlsTheme = function (palette, platform) {
    var controls = controlsTheme['dark'];
    if (palette === 'light') {
        controls = cjs(controls, controlsTheme['light']);
    }
    if (platform === 'linux') {
        controls = cjs(controls, controlsTheme['linux']);
    }
    return controls;
};
var getBarTheme = function (palette, platform) {
    var bar = barTheme['dark'];
    if (palette === 'light') {
        bar = cjs(bar, barTheme['light']);
    }
    if (platform === 'darwin') {
        bar = cjs(bar, barTheme['darwin']);
    }
    return bar;
};
var mergeTheme = function (overrides, platform) {
    if (platform === void 0) { platform = 'win32'; }
    var _a, _b, _c;
    var theme = {
        platform: platform
    };
    var paletteType = 'dark';
    if (overrides === null || overrides === void 0 ? void 0 : overrides.bar) {
        paletteType = (_a = overrides.bar.palette) !== null && _a !== void 0 ? _a : 'dark';
        theme['bar'] = cjs(getBarTheme(paletteType, platform), overrides.bar);
    }
    else {
        theme['bar'] = getBarTheme(paletteType, platform);
    }
    theme['controls'] = getControlsTheme(paletteType, platform);
    if (overrides === null || overrides === void 0 ? void 0 : overrides.controls) {
        theme['controls'] = cjs(theme['controls'], overrides.controls);
    }
    var menuStyle = 'default';
    if (overrides === null || overrides === void 0 ? void 0 : overrides.menu) {
        var menuPalette = (_b = overrides.menu.palette) !== null && _b !== void 0 ? _b : paletteType;
        menuStyle = (_c = overrides.menu.style) !== null && _c !== void 0 ? _c : menuStyle;
        theme['menu'] = cjs(getMenuTheme(menuPalette, menuStyle), overrides.menu);
    }
    else {
        theme['menu'] = getMenuTheme(paletteType, menuStyle);
    }
    return theme;
};
var useTheme = function (overrides, platform) {
    if (platform === void 0) { platform = 'win32'; }
    var _a = React.useState(mergeTheme(overrides, platform)), currentTheme = _a[0], setTheme = _a[1];
    React.useEffect(function () {
        setTheme(mergeTheme(overrides, platform));
    }, [overrides, platform]);
    return currentTheme;
};
var ThemeContext = React.createContext(mergeTheme());

var createRefs = function (children) {
    return Array(children.length)
        .fill(0)
        .map(function () { return React.createRef(); });
};
var useChildRefs = function (children) {
    var _a = React.useState(createRefs(children)), refs = _a[0], setRefs = _a[1];
    React.useEffect(function () {
        setRefs(createRefs(children));
    }, [children]);
    return refs;
};

function useHover() {
    // Reference to the element we're listen for events from
    var ref = React.useRef(null);
    // Hover state management
    var _a = React.useState(false), hovered = _a[0], setHovered = _a[1];
    // Simple effect, just bind and unbind the event handlers
    React.useEffect(function () {
        var node = ref.current;
        if (node) {
            // Event handlers
            var enter_1 = function () { return setHovered(true); };
            var leave_1 = function () { return setHovered(false); };
            node.addEventListener('mouseenter', enter_1);
            node.addEventListener('mouseleave', leave_1);
            return function () {
                node.removeEventListener('mouseenter', enter_1);
                node.removeEventListener('mouseleave', leave_1);
            };
        }
        return;
    }, [ref.current]);
    return [ref, hovered];
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

var modifiers = ['CommandOrControl', 'CmdOrCtrl'];
var CMD = '⌘';
var CTRL = 'Ctrl';
var topologicalSort = function (original, graph) {
    // Sort items topologically using a depth-first approach
    var sorted = [];
    var visited = new Set();
    var visit = function (mark) {
        // if item visited return
        if (visited.has(mark))
            return;
        // add item to list of visited nodes
        visited.add(mark);
        // get edges from graph for visited id
        var edges = graph.get(mark);
        if (edges != null) {
            // visit each edge
            edges.forEach(visit);
        }
        sorted.push(mark);
    };
    original.forEach(visit);
    return sorted;
};
var validate = function (item) {
    if (item === null || typeof item !== 'object') {
        return false;
    }
    // eslint-disable-next-line no-prototype-builtins
    return item.hasOwnProperty('label') || item.type === 'separator';
};
var addEdge = function (graph, fromEdge, toEdge) {
    if (!graph.has(fromEdge)) {
        // create edge list from
        graph.set(fromEdge, []);
    }
    // add to edge list from -> to
    graph.get(fromEdge).push(toEdge);
};
var sortMenuItems = function (menu) {
    var original = menu.map(function (_item, i) { return i; });
    var graph = new Map();
    var idToIndex = new Map(menu.map(function (item, i) { return [item.id, i]; }));
    // add graph edges to perform topological sort
    menu.forEach(function (item, i) {
        if (item.before) {
            // get index from item before id
            var to = idToIndex.get(item.before);
            if (to != null) {
                // add edge pointing from item before -> to current item
                addEdge(graph, to, i);
            }
        }
        if (item.after) {
            // get index from item after id
            var to = idToIndex.get(item.after);
            if (to != null) {
                // add edge from current item pointing -> to item after
                addEdge(graph, i, to);
            }
        }
    });
    // sort edges
    var sortedOrder = topologicalSort(original, graph);
    // return sorted menu items
    return sortedOrder.map(function (i) { return menu[i]; });
};
var parseAccelerator = function (accelerator, platform) {
    if (accelerator && accelerator !== '') {
        var re = new RegExp(modifiers.join('|'), 'gi');
        return accelerator.replace(re, function () {
            return platform === 'darwin' ? CMD : CTRL;
        });
    }
    return "";
};
var sortMenu = function (menu, platform) {
    // sort menu and all submenus
    return sortMenuItems(menu).map(function (item) {
        if (!validate(item)) {
            throw new TypeError('MenuItem must have at least one of label, role or type');
        }
        if (Array.isArray(item.submenu)) {
            // sort submenus
            return __assign(__assign({}, item), { submenu: sortMenu(item.submenu, platform) });
        }
        return __assign(__assign({}, item), { accelerator: parseAccelerator(item === null || item === void 0 ? void 0 : item.accelerator, platform) });
    });
};
var buildMenu = function (menu, platform) {
    if (!Array.isArray(menu)) {
        throw new TypeError('Menu must be an array');
    }
    return sortMenu(menu, platform);
};
var useMenu = function (platform, menu) {
    var _a = React.useState(buildMenu(__spreadArrays((menu !== null && menu !== void 0 ? menu : [])), platform)), currentMenu = _a[0], setMenu = _a[1];
    React.useEffect(function () {
        setMenu(buildMenu(__spreadArrays((menu !== null && menu !== void 0 ? menu : [])), platform));
    }, [menu, platform]);
    return currentMenu;
};

// Hook
var usePrevious = function (value) {
    // The ref object is a generic container whose current property is mutable ...
    // ... and can hold any value, similar to an instance property on a class
    var ref = React.useRef();
    // Store current value in ref
    React.useEffect(function () {
        ref.current = value;
    }, [value]); // Only re-run if value changes
    // Return previous value (happens before update in useEffect above)
    return ref.current;
};

function getRect(element) {
    var rect = {
        bottom: 0,
        height: 0,
        left: 0,
        right: 0,
        top: 0,
        width: 0
    };
    if (element)
        rect = element.getBoundingClientRect();
    return rect;
}
function useRect(ref) {
    var _a = React.useState(ref && ref.current ? getRect(ref.current) : getRect()), rect = _a[0], setRect = _a[1];
    var handleResize = React.useCallback(function () {
        if (!ref.current)
            return;
        setRect(getRect(ref.current)); // Update client rect
    }, [ref.current]);
    React.useLayoutEffect(function () {
        var element = ref.current;
        if (!element)
            return;
        handleResize();
        // @ts-ignore
        if (typeof ResizeObserver === "function") {
            // @ts-ignore
            var resizeObserver_1 = new ResizeObserver(function () { return handleResize(); });
            resizeObserver_1.observe(element);
            return function () {
                if (!resizeObserver_1)
                    return;
                resizeObserver_1.disconnect();
                resizeObserver_1 = null;
            };
        }
        else {
            window.addEventListener("resize", handleResize); // Browser support, remove freely
            return function () { return window.removeEventListener("resize", handleResize); };
        }
    }, [ref.current]);
    return rect;
}

var getWidth = function () {
    return window.innerWidth ||
        document.documentElement.clientWidth ||
        document.body.clientWidth;
};
var useWidth = function () {
    // save current window width in the state object
    var _a = React.useState(getWidth()), width = _a[0], setWidth = _a[1];
    // in this case useEffect will execute only once because
    // it does not have any dependencies.
    React.useEffect(function () {
        // timeoutId for debounce mechanism
        var timeoutId = null;
        var resizeListener = function () {
            // prevent execution of previous setTimeout
            if (timeoutId) {
                clearTimeout(timeoutId);
            }
            // change width from the state object after 150 milliseconds
            timeoutId = setTimeout(function () { return setWidth(getWidth()); }, 150);
        };
        // set resize listener
        window.addEventListener('resize', resizeListener);
        // clean up function
        return function () {
            // remove resize listener
            window.removeEventListener('resize', resizeListener);
        };
    }, []);
    return width;
};

var useWindowFocus = function () {
    var _a = React.useState(document.hasFocus()), focused = _a[0], setFocused = _a[1];
    React.useEffect(function () {
        var handleFocus = function () {
            setFocused(true);
        };
        var handleBlur = function () {
            setFocused(false);
        };
        window.addEventListener('focus', handleFocus);
        window.addEventListener('blur', handleBlur);
        return function () {
            window.removeEventListener('focus', handleFocus);
            window.removeEventListener('blur', handleBlur);
        };
    }, []);
    return focused;
};

var calcMenuOverflow = function (menu, menuBar, refs, overflowRef) {
    var _a;
    var _b = React.useState({
        menu: [],
        index: menu.length,
        hide: true
    }), overflow = _b[0], setOverflow = _b[1];
    var activeMenus = React.useRef((_a = menu === null || menu === void 0 ? void 0 : menu.length) !== null && _a !== void 0 ? _a : 0);
    var menuBarRect = useRect(menuBar);
    React.useEffect(function () {
        var availableSize = menuBarRect.width;
        var currentSize = 0;
        var full = false;
        var prevMenusShown = activeMenus.current;
        var numMenusShown = 0;
        refs === null || refs === void 0 ? void 0 : refs.forEach(function (mItem) {
            var node = mItem === null || mItem === void 0 ? void 0 : mItem.current;
            if (node) {
                if (!full) {
                    var size = node.offsetWidth;
                    if (currentSize + size > availableSize) {
                        full = true;
                        node.style.visibility = 'hidden';
                    }
                    else {
                        currentSize += size;
                        numMenusShown += 1;
                        if (numMenusShown > prevMenusShown) {
                            node.style.visibility = 'visible';
                        }
                    }
                }
                else {
                    node.style.visibility = 'hidden';
                }
            }
        });
        if (full) {
            var overflowNode = overflowRef === null || overflowRef === void 0 ? void 0 : overflowRef.current;
            if (overflowNode) {
                while (currentSize + overflowNode.offsetWidth > availableSize &&
                    numMenusShown > 0) {
                    numMenusShown -= 1;
                    var item = refs[numMenusShown].current;
                    currentSize -= item.offsetWidth;
                    item.style.visibility = 'hidden';
                }
            }
            setOverflow({
                menu: __spreadArrays(menu.slice(numMenusShown, menu.length)),
                index: numMenusShown,
                hide: false
            });
        }
        else {
            setOverflow({
                menu: [],
                index: menu.length,
                hide: true
            });
        }
        activeMenus.current = numMenusShown;
    }, [menuBarRect.width, refs]);
    return overflow;
};

var stopScrolling = function (e) {
    e.preventDefault();
    e.stopPropagation();
    e.returnValue = false;
    return false;
};
var useMenuScroll = function (scrollRef) {
    return React.useCallback(function (e) {
        var _a = scrollRef.current, scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
        var wheelDelta = e.deltaY;
        var isDeltaPositive = wheelDelta > 0;
        var step = 10; // scroll speed
        if (isDeltaPositive && wheelDelta > scrollHeight - clientHeight - scrollTop) {
            // eslint-disable-next-line no-param-reassign
            scrollRef.current.scrollTop = scrollHeight;
            return stopScrolling(e);
        }
        if (!isDeltaPositive && -wheelDelta > scrollTop) {
            // eslint-disable-next-line no-param-reassign
            scrollRef.current.scrollTop = 0;
            return stopScrolling(e);
        }
        // eslint-disable-next-line no-param-reassign
        scrollRef.current.scrollTop += wheelDelta > 0 ? step : -step;
        return stopScrolling(e);
    }, [scrollRef.current]);
};

var SUB_LABEL_HEIGHT = 20;
var MENU_PADDING = 5;
var OVERLAY_OFFSET = 24;
var getTopOffset = function (depth, hasSubLabel) {
    if (depth > 1) {
        return hasSubLabel ? SUB_LABEL_HEIGHT : MENU_PADDING;
    }
    return 0;
};
var useLayoutBounds = function (bounds, depth, hasSubLabel) {
    var _a = React.useState({
        top: bounds.bottom - getTopOffset(depth, hasSubLabel) + "px",
        left: bounds.left + "px"
    }), layout = _a[0], setLayout = _a[1];
    React.useLayoutEffect(function () {
        if (depth > 1) {
            if (window.innerWidth <= bounds.right + 200) {
                setLayout({
                    top: bounds.bottom - getTopOffset(depth, hasSubLabel) + "px",
                    left: bounds.left + OVERLAY_OFFSET + "px"
                });
            }
            else {
                setLayout({
                    top: bounds.top - getTopOffset(depth, hasSubLabel) + "px",
                    left: bounds.right + "px"
                });
            }
        }
    }, [bounds, depth, hasSubLabel]);
    return layout;
};

var useScrollFocus = function (currentIndex, menuItemHeight, parentBounds, scrollRef) {
    React.useLayoutEffect(function () {
        if (currentIndex >= 0 && scrollRef.current) {
            var menuItemBounds = menuItemHeight * currentIndex + menuItemHeight;
            var _a = scrollRef.current, scrollTop = _a.scrollTop, clientHeight = _a.clientHeight;
            if (menuItemBounds > clientHeight) {
                // eslint-disable-next-line no-param-reassign
                scrollRef.current.scrollTop = menuItemBounds;
            }
            else if (menuItemBounds < scrollTop) {
                // eslint-disable-next-line no-param-reassign
                scrollRef.current.scrollTop = menuItemBounds - menuItemHeight;
            }
        }
    }, [currentIndex, menuItemHeight, parentBounds, scrollRef.current]);
};

var isItemSubMenu = function (item) { var _a; return ((_a = item === null || item === void 0 ? void 0 : item.submenu) !== null && _a !== void 0 ? _a : false) && Array.isArray(item.submenu); };
var isItemSeparator = function (item) { return item && item.type && item.type.toLowerCase() === 'separator'; };
var getCurrentRef = function (childRefs, index, overflow, overflowRef) {
    if (overflow) {
        return overflow.index === index
            ? overflowRef
            : childRefs[index > overflow.index ? index - 1 : index];
    }
    return childRefs[index];
};
var toggleCheckedState = function (menu, index, radio) {
    if (radio === void 0) { radio = false; }
    if (!radio) {
        // eslint-disable-next-line no-param-reassign
        menu[index].checked = !menu[index].checked;
        return;
    }
    menu.forEach(function (item, idx) {
        if (item.type === 'radio') {
            // eslint-disable-next-line no-param-reassign
            item.checked = index === idx;
        }
    });
};
var calcMaximums = function (bounds, theme) {
    return [
        /* Max Height */ Math.max(0, window.innerHeight - bounds.top - theme.menu.list.marginBottom),
        /* Max Width */ Math.min(window.innerWidth, window.innerWidth - bounds.left)
    ];
};
var menuItemClick = function (e, idx, item, menu, dispatch, currentWindow) {
    if (item.disabled === true || !item.click) {
        e.stopPropagation();
        return;
    }
    switch (item.type) {
        case 'submenu':
            break;
        case 'radio': {
            toggleCheckedState(menu, idx, true);
            item.click(item, currentWindow, e);
            break;
        }
        case 'checkbox': {
            toggleCheckedState(menu, idx);
            item.click(item, currentWindow, e);
            break;
        }
        default:
            item.click(item, currentWindow, e);
            break;
    }
    dispatch({ type: 'reset' });
};
var currentSelected = function (selectedPath, depth) {
    if (depth < selectedPath.length) {
        return selectedPath[depth];
    }
    return -2;
};
var getSelectedMenu = function (menu, selected) {
    var m = menu;
    for (var i = 0; i < selected.length; i += 1) {
        var level = m[selected[i]];
        if (isItemSubMenu(level) && i < selected.length - 1) {
            m = level.submenu;
        }
        else {
            return [m, i];
        }
    }
    return [[], -1];
};
var getSelectedItem = function (menu, selected) {
    var _a = getSelectedMenu(menu, selected), m = _a[0], d = _a[1];
    return [m[selected[d]], selected[d], m, d];
};
var validNext = function (menu, start, maxIndex) {
    var current = start + 1;
    var max = maxIndex !== null && maxIndex !== void 0 ? maxIndex : menu.length;
    for (var index = 0; index < max; index += 1) {
        var i = (current + index) % max;
        if (!menu[i].disabled && !isItemSeparator(menu[i])) {
            return i;
        }
    }
    return start;
};
var validPrevious = function (menu, start, maxIndex) {
    var current = start - 1;
    var max = maxIndex !== null && maxIndex !== void 0 ? maxIndex : menu.length;
    for (var index = max; index >= 0; index -= 1) {
        var i = (index + current) % max;
        if (!menu[i].disabled && !isItemSeparator(menu[i])) {
            return i;
        }
    }
    return start;
};
var getValidItem = function (menu, selected, prev) {
    if (prev === void 0) { prev = false; }
    var _a = getSelectedItem(menu, selected), itemIdx = _a[1], m = _a[2], d = _a[3];
    return [prev ? validPrevious(m, itemIdx) : validNext(m, itemIdx), d];
};
var immutableSplice = function (arr, start, deleteCount) {
    var items = [];
    for (var _i = 3; _i < arguments.length; _i++) {
        items[_i - 3] = arguments[_i];
    }
    return __spreadArrays(arr.slice(0, start), items, arr.slice(start + deleteCount));
};

var altKeyCodeMatch = function (e, str) {
    return !!e.altKey && e.keyCode === (str === null || str === void 0 ? void 0 : str.charCodeAt(0));
};
var depth = 0;
var useAccessibility = function (menu, childRefs, selectedPath, dispatch, altKey, overflowRef, overflow, currentWindow) {
    var resetKeys = React.useCallback(function () {
        dispatch({
            type: 'alt',
            altKey: false
        });
    }, [dispatch]);
    var callback = React.useCallback(function (e) {
        var _a;
        if (e.altKey) {
            e.preventDefault();
            if (!altKey) {
                dispatch({
                    type: 'alt',
                    altKey: true
                });
            }
            // if the keycode is not alt
            if (e.keyCode !== 18) {
                var firstIndex = menu.findIndex(function (x) { return (!x.disabled && altKeyCodeMatch(e, x.label)); });
                if (firstIndex >= 0) {
                    var maxIndex = Math.min(firstIndex, overflow && overflow.hide ? menu.length - 1 : menu.length);
                    dispatch({
                        type: 'button-set',
                        depth: depth,
                        selected: maxIndex
                    });
                }
            }
            return;
        }
        var current = selectedPath[depth];
        if (current < 0)
            return;
        switch (e.keyCode) {
            case 13 /* enter */: {
                e.preventDefault();
                e.stopImmediatePropagation();
                var _b = getSelectedItem(menu, selectedPath), selectedItem = _b[0], selectedIndex = _b[1], selectedMenu = _b[2];
                if (isItemSubMenu(selectedItem)) {
                    dispatch({
                        type: 'set',
                        depth: selectedPath.length + 1,
                        selected: validNext(selectedItem.submenu, -1)
                    });
                    break;
                }
                menuItemClick(e, selectedIndex, selectedItem, selectedMenu, dispatch, currentWindow);
                break;
            }
            case 27 /* esc */: {
                e.preventDefault();
                var currRef = getCurrentRef(childRefs, current, overflow, overflowRef);
                (_a = currRef === null || currRef === void 0 ? void 0 : currRef.current) === null || _a === void 0 ? void 0 : _a.blur();
                dispatch({ type: 'reset' });
                break;
            }
            case 40 /* down */: {
                e.preventDefault();
                var _c = getValidItem(menu, selectedPath), next = _c[0], selectedDepth = _c[1];
                dispatch({
                    type: 'set',
                    depth: selectedDepth,
                    selected: next
                });
                break;
            }
            case 39 /* right */: {
                e.preventDefault();
                var selectedItem = getSelectedItem(menu, selectedPath)[0];
                if (isItemSubMenu(selectedItem)) {
                    dispatch({
                        type: 'set',
                        depth: selectedPath.length + 1,
                        selected: validNext(selectedItem.submenu, -1)
                    });
                    break;
                }
                var next = validNext(menu, current, overflow && overflow.hide ? menu.length - 1 : overflow.index + 1);
                dispatch({ type: 'button-set', depth: depth, selected: next });
                break;
            }
            case 38 /* up */: {
                e.preventDefault();
                var _d = getValidItem(menu, selectedPath, true), prev = _d[0], selectedDepth = _d[1];
                dispatch({
                    type: 'set',
                    depth: selectedDepth,
                    selected: prev
                });
                break;
            }
            case 37 /* left */:
                e.preventDefault();
                if (selectedPath.length <= 2) {
                    var prev = validPrevious(menu, current, overflow && overflow.hide ? menu.length - 1 : overflow.index + 1);
                    dispatch({ type: 'button-set', depth: depth, selected: prev });
                    break;
                }
                dispatch({ type: 'del', depth: selectedPath.length - 1 });
                break;
        }
    }, [
        menu,
        overflow,
        childRefs,
        overflowRef,
        selectedPath,
        currentWindow,
        dispatch
    ]);
    React.useEffect(function () {
        window.addEventListener('keydown', callback);
        window.addEventListener('keyup', resetKeys);
        return function () {
            window.removeEventListener('keydown', callback);
            window.addEventListener('keyup', resetKeys);
        };
    }, [callback, resetKeys]);
};

var defaultEvents = ['click'];
var useClickAway = function (ref, onClickAway, events) {
    if (events === void 0) { events = defaultEvents; }
    var savedCallback = React.useRef(onClickAway);
    React.useEffect(function () {
        savedCallback.current = onClickAway;
    }, [onClickAway]);
    React.useEffect(function () {
        var handler = function (event) {
            var el = ref.current;
            el && !el.contains(event.target) && savedCallback.current(event);
        };
        for (var _i = 0, events_1 = events; _i < events_1.length; _i++) {
            var eventName = events_1[_i];
            document.addEventListener(eventName, handler);
        }
        return function () {
            for (var _i = 0, events_2 = events; _i < events_2.length; _i++) {
                var eventName = events_2[_i];
                document.removeEventListener(eventName, handler);
            }
        };
    }, [events, ref]);
};

var WindowButton = function (_a) {
    var children = _a.children, onClick = _a.onClick, close = _a.close, controls = _a.controls, platform = _a.platform;
    var _b = useHover(), ref = _b[0], hovering = _b[1];
    var config;
    if (close) {
        config = hovering ? controls.close.hover : controls.close.default;
    }
    else {
        config = hovering ? controls.normal.hover : controls.normal.default;
    }
    var width = platform === 'win32' ? '100%' : '20px';
    var height = platform === 'win32' ? '100%' : '20px';
    return (React__default.createElement("div", { ref: ref, className: styles.Control },
        React__default.createElement("div", { style: {
                width: width,
                height: height,
                color: config.color,
                background: config.background,
                borderRadius: controls.borderRadius,
                border: controls.border
            }, onClick: onClick }, children)));
};

var buttons = function (isWin, onMinimize, onMaximize, onClose) { return ([
    {
        type: 'minimize',
        onClick: onMinimize,
        icon: React__default.createElement(MinimizeIcon, { isWin: isWin })
    },
    {
        type: 'maximize',
        onClick: onMaximize,
        icon: React__default.createElement(MaximizeIcon, { isWin: isWin })
    },
    {
        type: 'close',
        onClick: onClose,
        icon: React__default.createElement(CloseIcon, { isWin: isWin })
    }
]); };
var WindowControls = function (_a) {
    var onMinimize = _a.onMinimize, onMaximize = _a.onMaximize, onClose = _a.onClose, focused = _a.focused;
    var _b = React.useContext(ThemeContext), platform = _b.platform, bar = _b.bar, controls = _b.controls;
    var isWin = platform === 'win32';
    var width = platform === 'win32' ? '146px' : '120px';
    return (React__default.createElement("div", { className: styles.ControlsWrapper, style: {
            opacity: focused ? 1 : bar.inActiveOpacity,
            width: width
        } }, buttons(isWin, onMinimize, onMaximize, onClose).map(function (b) {
        return (React__default.createElement(WindowButton, { key: b.type, platform: platform, close: b.type === 'close', onClick: b.onClick, controls: controls }, b.icon));
    })));
};
WindowControls.propTypes = {
    focused: propTypes.bool,
    onMinimize: propTypes.func,
    onMaximize: propTypes.func,
    onClose: propTypes.func
};

var Checked = (React__default.createElement("svg", { width: "1792", height: "1792", viewBox: "0 0 1792 1792", xmlns: "http://www.w3.org/2000/svg" },
    React__default.createElement("path", { d: "M1671 566q0 40-28 68l-724 724-136 136q-28 28-68 28t-68-28l-136-136-362-362q-28-28-28-68t28-68l136-136q28-28 68-28t68 28l294 295 656-657q28-28 68-28t68 28l136 136q28 28 28 68z" })));
var Unchecked = React__default.createElement("span", null);
var RadioUnchecked = (React__default.createElement("svg", { width: "1792", height: "1792", viewBox: "0 0 1792 1792", xmlns: "http://www.w3.org/2000/svg" },
    React__default.createElement("path", { d: "M896 352q-148 0-273 73t-198 198-73 273 73 273 198 198 273 73 273-73 198-198 73-273-73-273-198-198-273-73zm768 544q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z" })));
var RadioChecked = (React__default.createElement("svg", { width: "1792", height: "1792", viewBox: "0 0 1792 1792", xmlns: "http://www.w3.org/2000/svg" },
    React__default.createElement("path", { d: "M1152 896q0 106-75 181t-181 75-181-75-75-181 75-181 181-75 181 75 75 181zm-256-544q-148 0-273 73t-198 198-73 273 73 273 198 198 273 73 273-73 198-198 73-273-73-273-198-198-273-73zm768 544q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z" })));
var Arrow = (React__default.createElement("svg", { version: "1.1", width: "24px", height: "24px" },
    React__default.createElement("g", { id: "Rounded" },
        React__default.createElement("path", { d: "M9.29,6.71L9.29,6.71c-0.39,0.39-0.39,1.02,0,1.41L13.17,12l-3.88,3.88c-0.39,0.39-0.39,1.02,0,1.41l0,0c0.39,0.39,1.02,0.39,1.41,0l4.59-4.59c0.39-0.39,0.39-1.02,0-1.41l-4.59-4.59C10.32,6.32,9.68,6.32,9.29,6.71z" }))));
var MenuIcon = function () { return (React__default.createElement("svg", { version: "1.1", width: "24px", height: "24px", viewBox: "0 0 32 32" },
    React__default.createElement("path", { d: "M 4 7 L 4 9 L 28 9 L 28 7 Z M 4 15 L 4 17 L 28 17 L 28 15 Z M 4 23 L 4 25 L 28 25 L 28 23 Z " }))); };

var getStatusIcon = function (item) {
    switch (item.type) {
        case 'radio':
            return item.checked ? RadioChecked : RadioUnchecked;
        case 'checkbox':
            return item.checked ? Checked : Unchecked;
        default: {
            if (item === null || item === void 0 ? void 0 : item.icon) {
                return (React__default.createElement("div", { className: styles.MenuItemIcon, style: { backgroundImage: "url(" + item.icon + ")" } }));
            }
            return React__default.createElement("span", null);
        }
    }
};
var getTextColor = function (item, hovering, theme) {
    if (hovering && !item.disabled) {
        return theme.menu.item.active.color;
    }
    return theme.menu.item.default.color;
};
var getIconColor = function (item, hovering, theme) {
    if (hovering && !item.disabled) {
        return theme.menu.item.active.color;
    }
    if (theme.menu.icon.highlight) {
        return theme.menu.item.active.background;
    }
    return theme.menu.item.default.color;
};
var getAcceleratorColor = function (item, hovering, theme) {
    return hovering && !item.disabled ? theme.menu.item.active.color : theme.menu.accelerator.color;
};
var getBackgroundColor = function (hovering, item, theme) {
    return hovering && !item.disabled ? theme.menu.item.active.background : '';
};
var MenuItemComponent = function (_a) {
    var item = _a.item, onClick = _a.onClick, currentWindow = _a.currentWindow, depth = _a.depth, dispatch = _a.dispatch, selectedPath = _a.selectedPath, idx = _a.idx;
    var _b, _c, _d;
    if (item.hidden === true) {
        return null;
    }
    var theme = React.useContext(ThemeContext);
    if (isItemSeparator(item)) {
        return (React__default.createElement("hr", { className: styles.Separator, style: { borderBottom: "1px solid " + theme.menu.separator.color } }));
    }
    var isSubMenu = isItemSubMenu(item);
    var _e = useHover(), ref = _e[0], hovering = _e[1];
    React.useEffect(function () {
        if (hovering) {
            dispatch({ type: isSubMenu ? 'hover-sub' : 'set', depth: depth, selected: idx });
        }
    }, [hovering, depth]);
    var selected = currentSelected(selectedPath, depth) === idx;
    var selectedSub = selected && currentSelected(selectedPath, depth + 1) >= -1;
    var textColor = getTextColor(item, selected, theme);
    var iconColor = getIconColor(item, selected, theme);
    var acceleratedColor = getAcceleratorColor(item, selected, theme);
    var backgroundColor = getBackgroundColor(selected, item, theme);
    return (React__default.createElement("li", { className: styles.MenuItemContainer, ref: ref, style: {
            color: textColor,
            opacity: !item.disabled ? 1 : 0.3,
            backgroundColor: backgroundColor
        }, role: "option", onClick: onClick },
        React__default.createElement("a", { className: styles.MenuItemWrapper, style: {
                height: theme.menu.item.height,
                maxWidth: (_b = theme.menu.list) === null || _b === void 0 ? void 0 : _b.maxWidth,
                minWidth: (_c = theme.menu.list) === null || _c === void 0 ? void 0 : _c.minWidth
            } },
            React__default.createElement("div", { className: styles.StatusIcon, style: { color: iconColor } }, getStatusIcon(item)),
            React__default.createElement("span", { className: styles.MenuItemLabel }, item.label),
            React__default.createElement("span", { className: styles.Accelerator, style: { color: acceleratedColor } }, item.accelerator),
            isSubMenu && React__default.createElement("div", { className: styles.SubMenuArrow }, Arrow)),
        !item.disabled && isSubMenu && selectedSub && (React__default.createElement(MenuList$1, { key: depth, menu: (_d = item.submenu) !== null && _d !== void 0 ? _d : [], ref: ref, currentWindow: currentWindow, depth: depth + 1, selectedPath: selectedPath, dispatch: dispatch, subLabel: item.label }))));
};

var MenuList = function (_a) {
    var menu = _a.menu, parentRef = _a.parentRef, currentWindow = _a.currentWindow, depth = _a.depth, selectedPath = _a.selectedPath, dispatch = _a.dispatch, subLabel = _a.subLabel;
    var _b;
    var theme = React.useContext(ThemeContext);
    var menuRef = React.useRef(null);
    var scrollRef = React.useRef(null);
    var parentBounds = useRect(parentRef);
    var bounds = useRect(menuRef);
    var _c = calcMaximums(bounds, theme), maxHeight = _c[0], maxWidth = _c[1];
    var hasSubLabel = !!(subLabel && subLabel !== "" && theme.menu.header.show);
    var layout = useLayoutBounds(parentBounds, depth, hasSubLabel);
    var handleScroll = useMenuScroll(scrollRef);
    useScrollFocus(currentSelected(selectedPath, depth), theme.menu.item.height, parentBounds, scrollRef);
    return (React__default.createElement("div", { className: styles.MenuListContainer, style: {
            color: theme.menu.item.default.color,
            top: layout.top,
            left: layout.left,
            zIndex: theme.menu.list.zIndex,
            background: theme.menu.list.background,
            boxShadow: theme.menu.list.boxShadow
        }, ref: menuRef },
        hasSubLabel &&
            React__default.createElement("div", { className: styles.SubMenuLabel, style: {
                    color: (_b = theme.menu.header) === null || _b === void 0 ? void 0 : _b.color
                } }, subLabel),
        React__default.createElement("div", { className: styles.MenuListScrollView },
            React__default.createElement("div", { className: styles.MenuList, style: {
                    maxHeight: maxHeight,
                    maxWidth: maxWidth
                }, onWheel: handleScroll, ref: scrollRef },
                React__default.createElement("div", { className: styles.MenuListVertical, style: {
                        padding: hasSubLabel ? '0px 0px 5px 0px' : '5px 0px'
                    } },
                    React__default.createElement("ul", { className: styles.MenuListItems }, menu &&
                        menu.map(function (item, idx) { return (React__default.createElement(MenuItemComponent, { key: item.label + "-" + depth + "-" + idx, idx: idx, item: item, currentWindow: currentWindow, depth: depth, selectedPath: selectedPath, dispatch: dispatch, onClick: function (e) {
                                return menuItemClick(e, idx, item, menu, dispatch, currentWindow);
                            } })); })))))));
};
// export default MenuList;
var MenuList$1 = React__default.forwardRef(function (props, ref) { return (
// eslint-disable-next-line react/jsx-props-no-spreading
React__default.createElement(MenuList, __assign({}, props, { parentRef: ref }))); });

var Overlay = function (_a) {
    var top = _a.top, onClick = _a.onClick;
    var theme = React.useContext(ThemeContext);
    var click = React.useCallback(function (e) {
        onClick && onClick(e);
    }, [onClick]);
    return (React__default.createElement("div", { className: styles.MenuOverlay, style: {
            background: theme.menu.overlay.background,
            opacity: theme.menu.overlay.opacity,
            top: top,
            zIndex: theme.menu.overlay.zIndex
        }, onClick: click }));
};

var getBackgroundColor$1 = function (disabled, selected, hovering, theme) {
    if (!disabled) {
        if (selected) {
            return theme.active.background;
        }
        if (hovering) {
            return theme.hover.background;
        }
    }
    return theme.default.background;
};
var getColor = function (disabled, open, theme) {
    if (open && !disabled) {
        return theme.active.color;
    }
    return theme.default.color;
};
var getOpacity = function (disabled, focused, inActiveOpacity, theme) {
    if (!focused) {
        return inActiveOpacity;
    }
    if (disabled) {
        return theme.disabledOpacity;
    }
    return 1;
};
var Button = function (_a) {
    var myRef = _a.myRef, onOverlayClick = _a.onOverlayClick, theme = _a.theme, label = _a.label, children = _a.children, open = _a.open, inactiveOpacity = _a.inactiveOpacity, focused = _a.focused, onClick = _a.onClick, style = _a.style, disabled = _a.disabled, hideOverlay = _a.hideOverlay, onHover = _a.onHover;
    myRef = myRef !== null && myRef !== void 0 ? myRef : React.useRef(null);
    var bounds = useRect(myRef);
    var _b = useHover(), hoverRef = _b[0], hovering = _b[1];
    useClickAway(hoverRef, function () {
        if (open) {
            onOverlayClick();
        }
    });
    React.useEffect(function () {
        onHover && onHover(hovering);
    }, [hovering]);
    var backgroundColor = getBackgroundColor$1(disabled, open, hovering, theme);
    var color = getColor(disabled, open, theme);
    var opacity = getOpacity(disabled, focused, inactiveOpacity, theme);
    return (React__default.createElement("div", { className: styles.MenuButtonContainer, ref: myRef, style: __assign(__assign({}, (style !== null && style !== void 0 ? style : {})), { backgroundColor: backgroundColor }), tabIndex: 0, "aria-haspopup": true },
        open && !hideOverlay && (React__default.createElement(Overlay, { top: bounds.bottom })),
        open && children,
        React__default.createElement("div", { className: styles.MenuButtonWrapper },
            React__default.createElement("button", { className: styles.MenuButton, ref: hoverRef, style: {
                    color: color,
                    maxWidth: theme.maxWidth
                }, onClick: onClick },
                React__default.createElement("div", { className: styles.MenuButtonLabelWrapper, style: { opacity: opacity, maxWidth: theme.maxWidth } }, label)))));
};
var Button$1 = React__default.forwardRef(function (props, ref) {
    return React__default.createElement(Button, __assign({}, props, { myRef: ref }));
});

var useAltLabel = function (l) {
    var _a = React.useState({
        first: l === null || l === void 0 ? void 0 : l.slice(0, 1),
        rest: l === null || l === void 0 ? void 0 : l.slice(1)
    }), label = _a[0], setLabel = _a[1];
    React.useEffect(function () {
        setLabel({
            first: l === null || l === void 0 ? void 0 : l.slice(0, 1),
            rest: l === null || l === void 0 ? void 0 : l.slice(1)
        });
    }, [l]);
    return label;
};
var MenuButton = function (_a) {
    var focused = _a.focused, currentWindow = _a.currentWindow, item = _a.item, altKey = _a.altKey, myRef = _a.myRef, style = _a.style, idx = _a.idx, depth = _a.depth, selectedPath = _a.selectedPath, dispatch = _a.dispatch, icon = _a.icon;
    var _b, _c, _d;
    var theme = React.useContext(ThemeContext);
    var label = useAltLabel(item.label);
    var onClose = React.useCallback(function () {
        if (myRef.current) {
            myRef.current.blur();
        }
        dispatch({ type: 'set', depth: depth, selected: -1 });
    }, [myRef.current]);
    var onClick = React.useCallback(function () {
        if (!item.disabled) {
            dispatch({ type: 'button-set', depth: depth, selected: idx });
        }
    }, [idx]);
    var onHover = React.useCallback(function (hovering) {
        if (currentSelected(selectedPath, depth) >= 0 && hovering) {
            onClick();
        }
    }, [myRef.current, selectedPath, depth, onClick]);
    var selected = currentSelected(selectedPath, depth) === idx;
    var isSubMenu = isItemSubMenu(item);
    var open = !((_b = item === null || item === void 0 ? void 0 : item.disabled) !== null && _b !== void 0 ? _b : false) && isSubMenu && selected;
    var textDecoration = !item.disabled && altKey ? 'underline' : 'none';
    return (React__default.createElement(Button$1, { ref: myRef, disabled: (_c = item.disabled) !== null && _c !== void 0 ? _c : false, open: open, theme: __assign({}, theme.bar.button), focused: focused, style: style, inactiveOpacity: theme.bar.inActiveOpacity, onClick: onClick, label: icon !== null && icon !== void 0 ? icon : (React__default.createElement(React.Fragment, null,
            React__default.createElement("span", { className: styles.MenuButtonLabel, style: {
                    textDecoration: textDecoration
                }, "aria-hidden": "true", tabIndex: -1 }, label.first),
            React__default.createElement("span", { className: styles.MenuButtonLabel, "aria-hidden": "true", tabIndex: -1 }, label.rest))), onOverlayClick: onClose, onHover: onHover },
        React__default.createElement(MenuList$1, { key: depth, menu: (_d = item.submenu) !== null && _d !== void 0 ? _d : [], ref: myRef, currentWindow: currentWindow, depth: depth + 1, selectedPath: selectedPath, dispatch: dispatch })));
};
var MenuButton$1 = React__default.forwardRef(function (props, ref) {
    return React__default.createElement(MenuButton, __assign({}, props, { myRef: ref }));
});

var initialState = { selectedPath: [-1], altKey: false };
var menuReducer = function (state, action) {
    switch (action.type) {
        case 'alt': {
            return __assign(__assign({}, state), { altKey: action.altKey });
        }
        case 'reset': {
            return __assign(__assign({}, state), { selectedPath: [-1] });
        }
        case 'set': {
            return __assign(__assign({}, state), { selectedPath: __spreadArrays(state.selectedPath.slice(0, action.depth), [action.selected]) });
        }
        case 'del': {
            return __assign(__assign({}, state), { selectedPath: state.selectedPath.slice(0, action.depth) });
        }
        case 'button-set':
        case 'hover-sub': {
            // when hovering over a sub menu add -1 for the sub menu
            return __assign(__assign({}, state), { selectedPath: __spreadArrays(state.selectedPath.slice(0, action.depth), [action.selected, -1]) });
        }
        default:
            return state;
    }
};

var overflowItem = function (menu) {
    return {
        label: '...',
        submenu: menu
    };
};
var depth$1 = 0;
var HorizontalMenu = function (_a) {
    var menu = _a.menu, focused = _a.focused, currentWindow = _a.currentWindow, menuBar = _a.menuBar;
    var overflowRef = React.useRef(null);
    var childRefs = useChildRefs(menu);
    var overflow = calcMenuOverflow(menu, menuBar, childRefs, overflowRef);
    var _b = React.useState(immutableSplice(menu, overflow.index, 0, overflowItem(overflow.menu))), fixedMenu = _b[0], updateFixedMenu = _b[1];
    var width = useWidth();
    var prevWidth = usePrevious(width);
    var _c = React.useReducer(menuReducer, initialState), _d = _c[0], selectedPath = _d.selectedPath, altKey = _d.altKey, dispatch = _c[1];
    React.useEffect(function () {
        updateFixedMenu(immutableSplice(menu, overflow.index, 0, overflowItem(overflow.menu)));
    }, [overflow]);
    React.useEffect(function () {
        // close menu when focused away from window
        // close menu when resizing the window
        if ((!focused && selectedPath[depth$1] >= 0) || prevWidth !== width) {
            dispatch({ type: 'reset' });
        }
    }, [focused, width]);
    useAccessibility(fixedMenu, childRefs, selectedPath, dispatch, altKey, overflowRef, overflow, currentWindow);
    return (React__default.createElement(React.Fragment, null, fixedMenu.map(function (menuItem, i) {
        var overflowButton = overflow.index === i;
        var overflowedItem = i > overflow.index;
        var currRef = overflowButton
            ? overflowRef
            : childRefs[overflowedItem ? i - 1 : i];
        var style = overflowButton ? {
            visibility: overflow.hide ? 'hidden' : 'visible'
        } : {};
        return (React__default.createElement(MenuButton$1
        // eslint-disable-next-line react/no-array-index-key
        , { 
            // eslint-disable-next-line react/no-array-index-key
            key: menuItem.label + "-" + depth$1 + "-" + i, ref: currRef, focused: focused, idx: i, item: menuItem, currentWindow: currentWindow, style: style, depth: depth$1, selectedPath: selectedPath, dispatch: dispatch, altKey: altKey }));
    })));
};

var menuButton = function (menu) {
    return {
        id: 'menu-button',
        label: 'Menu',
        submenu: menu
    };
};
var depth$2 = 0;
var VerticalMenu = function (_a) {
    var menu = _a.menu, focused = _a.focused, currentWindow = _a.currentWindow;
    var _b, _c;
    var _d = React.useState([menuButton(menu)]), fixedMenu = _d[0], updateFixedMenu = _d[1];
    var childRefs = useChildRefs(fixedMenu);
    var width = useWidth();
    var prevWidth = usePrevious(width);
    var _e = React.useReducer(menuReducer, initialState), selectedPath = _e[0].selectedPath, dispatch = _e[1];
    React.useEffect(function () {
        // close menu when focused away from window
        // close menu when resizing the window
        if ((!focused && selectedPath[depth$2] >= 0) || prevWidth !== width) {
            dispatch({ type: 'reset' });
        }
    }, [focused, width]);
    React.useEffect(function () {
        updateFixedMenu([menuButton(menu)]);
    }, [menu]);
    useAccessibility(fixedMenu, childRefs, selectedPath, dispatch, false, undefined, undefined, currentWindow);
    if (((_c = (_b = fixedMenu[0].submenu) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0) === 0) {
        return null;
    }
    return (React__default.createElement(MenuButton$1, { ref: childRefs[0], focused: focused, idx: 0, item: fixedMenu[0], currentWindow: currentWindow, depth: depth$2, selectedPath: selectedPath, dispatch: dispatch, icon: React__default.createElement(MenuIcon, null), altKey: false }));
};

var MenuBar = function (_a) {
    var menu = _a.menu, focused = _a.focused, currentWindow = _a.currentWindow;
    var _b = React.useContext(ThemeContext), platform = _b.platform, style = _b.menu.style;
    var menuBar = React.useRef(null);
    var currentMenu = useMenu(platform, menu);
    return (React__default.createElement("div", { className: styles.MenuBar, role: "menubar", ref: menuBar }, style === 'vertical' ? (React__default.createElement(VerticalMenu, { menu: currentMenu, focused: focused, currentWindow: currentWindow }))
        : (React__default.createElement(HorizontalMenu, { menu: currentMenu, menuBar: menuBar, focused: focused, currentWindow: currentWindow }))));
};

var getMargin = function (margin, align, hasIcon, hasMenu, style) {
    if (align === 'left') {
        return margin === 'left' ? '0px' : 'auto';
    }
    if (align === 'right') {
        if (margin === 'left') {
            return hasIcon && (style === 'vertical' || !hasMenu) ? '0px' : 'auto';
        }
        return margin === 'right' ? '0px' : 'auto';
    }
    if (align === 'center') {
        return (margin === 'left' && hasIcon) && (!hasMenu || style === 'vertical') ? '0px' : 'auto';
    }
    return 'auto';
};
var getPadding = function (marginLeft, hasIcon, hasMenu, style) {
    if (marginLeft === '0px') {
        if (!hasIcon && (!hasMenu || style === 'stacked')) {
            return '0px 10px';
        }
        else if (!hasIcon && (!hasMenu || style === 'stacked')) {
            return '0px 8px';
        }
    }
    return '0px 6px';
};
var Title = function (_a) {
    var focused = _a.focused, children = _a.children, hasIcon = _a.hasIcon, hasMenu = _a.hasMenu;
    var _b = React.useContext(ThemeContext), _c = _b.bar, height = _c.height, title = _c.title, inActiveOpacity = _c.inActiveOpacity, style = _b.menu.style;
    var _d = title, color = _d.color, align = _d.align, fontFamily = _d.fontFamily, fontWeight = _d.fontWeight;
    var marginLeft = getMargin('left', align, hasIcon, hasMenu, style);
    var marginRight = getMargin('right', align, hasIcon, hasMenu, style);
    var padding = getPadding(marginLeft, hasIcon, hasMenu, style);
    var lineHeight = typeof height === 'number' ? height + "px" : height;
    return (React__default.createElement("div", { className: styles.Title, style: {
            opacity: focused ? 1 : inActiveOpacity,
            marginLeft: marginLeft,
            marginRight: marginRight,
            padding: padding,
            lineHeight: lineHeight,
            color: color,
            fontFamily: fontFamily,
            fontWeight: fontWeight,
        } }, children));
};
Title.propTypes = {
    isWin: propTypes.bool,
    focused: propTypes.bool,
    children: propTypes.node
};

var Bar = function (_a) {
    var onDoubleClick = _a.onDoubleClick, children = _a.children, bottomBar = _a.bottomBar;
    var _b = React.useContext(ThemeContext), platform = _b.platform, _c = _b.bar, height = _c.height, borderBottom = _c.borderBottom, background = _c.background, fontFamily = _c.fontFamily, color = _c.color, style = _b.menu.style;
    var ref = React.useRef(null);
    var dblClick = React.useCallback(function (e) {
        if (e.target == ref.current) {
            onDoubleClick && onDoubleClick(e);
        }
    }, [ref.current, onDoubleClick]);
    var isDarwin = platform === 'darwin';
    return (React__default.createElement("div", { className: styles.Bar, ref: ref, style: {
            padding: isDarwin ? '0 70px' : 0,
            borderBottom: (style === 'stacked' && !bottomBar) ? '' : borderBottom,
            background: background,
            color: color,
            height: height,
            fontFamily: fontFamily,
        }, onDoubleClick: dblClick }, children));
};

var getMarginLeft = function (vertical, hasTitle, align, platform) {
    if ((vertical || platform === 'darwin') && hasTitle && (align === 'center' || align === 'right')) {
        return 'auto';
    }
    return undefined;
};
var Logo = function (_a) {
    var _b;
    var children = _a.children, src = _a.src, hasTitle = _a.hasTitle;
    var _c;
    var theme = React.useContext(ThemeContext);
    var vertical = theme.menu.style === 'vertical';
    var className = classnames((_b = {},
        _b[styles.Logo] = true,
        _b[styles.Vertical] = vertical,
        _b));
    var style = {
        width: theme.bar.icon.width,
        height: theme.bar.icon.height,
        marginLeft: getMarginLeft(vertical, hasTitle, (_c = theme.bar.title) === null || _c === void 0 ? void 0 : _c.align, theme.platform)
    };
    if (src && src !== '') {
        return (React__default.createElement("img", { className: className, src: src, style: style }));
    }
    return (React__default.createElement("div", { className: className, style: style }, children));
};

var TitleBar = function (_a) {
    var onMinimize = _a.onMinimize, onMaximize = _a.onMaximize, onClose = _a.onClose, onDoubleClick = _a.onDoubleClick, disableMaximize = _a.disableMaximize, disableMinimize = _a.disableMinimize, platform = _a.platform, children = _a.children, theme = _a.theme, menu = _a.menu, icon = _a.icon, iconSrc = _a.iconSrc, title = _a.title, currentWindow = _a.currentWindow;
    var _b, _c, _d, _e, _f;
    var focused = useWindowFocus();
    var currentTheme = useTheme(theme, platform);
    var isDarwin = platform === 'darwin';
    var stacked = ((_b = currentTheme === null || currentTheme === void 0 ? void 0 : currentTheme.menu) === null || _b === void 0 ? void 0 : _b.style) === 'stacked';
    var vertical = ((_c = currentTheme === null || currentTheme === void 0 ? void 0 : currentTheme.menu) === null || _c === void 0 ? void 0 : _c.style) === 'vertical';
    var controlsRight = ((_d = currentTheme === null || currentTheme === void 0 ? void 0 : currentTheme.controls) === null || _d === void 0 ? void 0 : _d.layout) === 'right';
    var hasIcon = !!icon || !!iconSrc;
    var hasMenu = !isDarwin && (((_e = menu === null || menu === void 0 ? void 0 : menu.length) !== null && _e !== void 0 ? _e : 0) > 0);
    var hasTitle = !!(title && title !== '');
    return (React__default.createElement(ThemeContext.Provider, { value: currentTheme },
        React__default.createElement(React.Fragment, null,
            React__default.createElement(Bar, { onDoubleClick: onDoubleClick },
                React__default.createElement("div", { className: classnames(styles.ResizeHandle, styles.Top) }),
                React__default.createElement("div", { className: classnames(styles.ResizeHandle, styles.Left), style: { height: (_f = theme === null || theme === void 0 ? void 0 : theme.bar) === null || _f === void 0 ? void 0 : _f.height } }),
                !isDarwin && !controlsRight && (React__default.createElement(WindowControls, { focused: focused, disableMaximize: disableMaximize, disableMinimize: disableMinimize, onMinimize: onMinimize, onMaximize: onMaximize, onClose: onClose })),
                !vertical && hasIcon && React__default.createElement(Logo, { src: iconSrc, hasTitle: hasTitle }, icon),
                !isDarwin && !stacked && hasMenu && (React__default.createElement(MenuBar, { focused: focused, menu: menu, currentWindow: currentWindow })),
                vertical && hasIcon && React__default.createElement(Logo, { src: iconSrc, hasTitle: hasTitle }, icon),
                React__default.createElement(Title, { focused: focused, hasIcon: hasIcon, hasMenu: hasMenu }, title),
                children,
                !isDarwin && controlsRight && (React__default.createElement(WindowControls, { focused: focused, disableMaximize: disableMaximize, disableMinimize: disableMinimize, onMinimize: onMinimize, onMaximize: onMaximize, onClose: onClose }))),
            !isDarwin && stacked && (React__default.createElement(Bar, { bottomBar: true }, hasMenu &&
                React__default.createElement(MenuBar, { focused: focused, menu: menu, currentWindow: currentWindow }))))));
};

exports.MenuOverlay = Overlay;
exports.TitleBarButton = Button$1;
exports.TitleBarThemeContext = ThemeContext;
exports.default = TitleBar;
//# sourceMappingURL=index.js.map
